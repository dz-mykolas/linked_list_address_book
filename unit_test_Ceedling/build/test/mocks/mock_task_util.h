/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_TASK_UTIL_H
#define _MOCK_TASK_UTIL_H

#include "unity.h"
#include "task_util.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_task_util_Init(void);
void mock_task_util_Destroy(void);
void mock_task_util_Verify(void);




#define sig_handler_Ignore() sig_handler_CMockIgnore()
void sig_handler_CMockIgnore(void);
#define sig_handler_StopIgnore() sig_handler_CMockStopIgnore()
void sig_handler_CMockStopIgnore(void);
#define sig_handler_Expect(signum) sig_handler_CMockExpect(__LINE__, signum)
void sig_handler_CMockExpect(UNITY_LINE_TYPE cmock_line, int signum);
typedef void (* CMOCK_sig_handler_CALLBACK)(int signum, int cmock_num_calls);
void sig_handler_AddCallback(CMOCK_sig_handler_CALLBACK Callback);
void sig_handler_Stub(CMOCK_sig_handler_CALLBACK Callback);
#define sig_handler_StubWithCallback sig_handler_Stub
#define file_open_Ignore() file_open_CMockIgnore()
void file_open_CMockIgnore(void);
#define file_open_StopIgnore() file_open_CMockStopIgnore()
void file_open_CMockStopIgnore(void);
#define file_open_Expect(file_path, list) file_open_CMockExpect(__LINE__, file_path, list)
void file_open_CMockExpect(UNITY_LINE_TYPE cmock_line, char* file_path, struct Person** list);
typedef void (* CMOCK_file_open_CALLBACK)(char* file_path, struct Person** list, int cmock_num_calls);
void file_open_AddCallback(CMOCK_file_open_CALLBACK Callback);
void file_open_Stub(CMOCK_file_open_CALLBACK Callback);
#define file_open_StubWithCallback file_open_Stub
#define load_file_Ignore() load_file_CMockIgnore()
void load_file_CMockIgnore(void);
#define load_file_StopIgnore() load_file_CMockStopIgnore()
void load_file_CMockStopIgnore(void);
#define load_file_Expect(file, list) load_file_CMockExpect(__LINE__, file, list)
void load_file_CMockExpect(UNITY_LINE_TYPE cmock_line, FILE* file, struct Person** list);
typedef void (* CMOCK_load_file_CALLBACK)(FILE* file, struct Person** list, int cmock_num_calls);
void load_file_AddCallback(CMOCK_load_file_CALLBACK Callback);
void load_file_Stub(CMOCK_load_file_CALLBACK Callback);
#define load_file_StubWithCallback load_file_Stub
#define print_possible_Ignore() print_possible_CMockIgnore()
void print_possible_CMockIgnore(void);
#define print_possible_StopIgnore() print_possible_CMockStopIgnore()
void print_possible_CMockStopIgnore(void);
#define print_possible_Expect() print_possible_CMockExpect(__LINE__)
void print_possible_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_print_possible_CALLBACK)(int cmock_num_calls);
void print_possible_AddCallback(CMOCK_print_possible_CALLBACK Callback);
void print_possible_Stub(CMOCK_print_possible_CALLBACK Callback);
#define print_possible_StubWithCallback print_possible_Stub
#define consume_buffer_Ignore() consume_buffer_CMockIgnore()
void consume_buffer_CMockIgnore(void);
#define consume_buffer_StopIgnore() consume_buffer_CMockStopIgnore()
void consume_buffer_CMockStopIgnore(void);
#define consume_buffer_Expect(buffer) consume_buffer_CMockExpect(__LINE__, buffer)
void consume_buffer_CMockExpect(UNITY_LINE_TYPE cmock_line, char* buffer);
typedef void (* CMOCK_consume_buffer_CALLBACK)(char* buffer, int cmock_num_calls);
void consume_buffer_AddCallback(CMOCK_consume_buffer_CALLBACK Callback);
void consume_buffer_Stub(CMOCK_consume_buffer_CALLBACK Callback);
#define consume_buffer_StubWithCallback consume_buffer_Stub
#define ask_num_IgnoreAndReturn(cmock_retval) ask_num_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ask_num_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define ask_num_StopIgnore() ask_num_CMockStopIgnore()
void ask_num_CMockStopIgnore(void);
#define ask_num_ExpectAndReturn(cmock_retval) ask_num_CMockExpectAndReturn(__LINE__, cmock_retval)
void ask_num_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_ask_num_CALLBACK)(int cmock_num_calls);
void ask_num_AddCallback(CMOCK_ask_num_CALLBACK Callback);
void ask_num_Stub(CMOCK_ask_num_CALLBACK Callback);
#define ask_num_StubWithCallback ask_num_Stub
#define ask_input_IgnoreAndReturn(cmock_retval) ask_input_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ask_input_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define ask_input_StopIgnore() ask_input_CMockStopIgnore()
void ask_input_CMockStopIgnore(void);
#define ask_input_ExpectAndReturn(cmock_retval) ask_input_CMockExpectAndReturn(__LINE__, cmock_retval)
void ask_input_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
typedef char* (* CMOCK_ask_input_CALLBACK)(int cmock_num_calls);
void ask_input_AddCallback(CMOCK_ask_input_CALLBACK Callback);
void ask_input_Stub(CMOCK_ask_input_CALLBACK Callback);
#define ask_input_StubWithCallback ask_input_Stub
#define ask_address_input_IgnoreAndReturn(cmock_retval) ask_address_input_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ask_address_input_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct Person* cmock_to_return);
#define ask_address_input_StopIgnore() ask_address_input_CMockStopIgnore()
void ask_address_input_CMockStopIgnore(void);
#define ask_address_input_ExpectAndReturn(cmock_retval) ask_address_input_CMockExpectAndReturn(__LINE__, cmock_retval)
void ask_address_input_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct Person* cmock_to_return);
typedef struct Person* (* CMOCK_ask_address_input_CALLBACK)(int cmock_num_calls);
void ask_address_input_AddCallback(CMOCK_ask_address_input_CALLBACK Callback);
void ask_address_input_Stub(CMOCK_ask_address_input_CALLBACK Callback);
#define ask_address_input_StubWithCallback ask_address_input_Stub
#define do_task_Ignore() do_task_CMockIgnore()
void do_task_CMockIgnore(void);
#define do_task_StopIgnore() do_task_CMockStopIgnore()
void do_task_CMockStopIgnore(void);
#define do_task_Expect(list, task) do_task_CMockExpect(__LINE__, list, task)
void do_task_CMockExpect(UNITY_LINE_TYPE cmock_line, struct Person** list, int task);
typedef void (* CMOCK_do_task_CALLBACK)(struct Person** list, int task, int cmock_num_calls);
void do_task_AddCallback(CMOCK_do_task_CALLBACK Callback);
void do_task_Stub(CMOCK_do_task_CALLBACK Callback);
#define do_task_StubWithCallback do_task_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
