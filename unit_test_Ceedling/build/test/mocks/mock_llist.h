/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LLIST_H
#define _MOCK_LLIST_H

#include "unity.h"
#include "llist.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_llist_Init(void);
void mock_llist_Destroy(void);
void mock_llist_Verify(void);




#define create_address_node_IgnoreAndReturn(cmock_retval) create_address_node_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void create_address_node_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct Person* cmock_to_return);
#define create_address_node_StopIgnore() create_address_node_CMockStopIgnore()
void create_address_node_CMockStopIgnore(void);
#define create_address_node_ExpectAndReturn(string, cmock_retval) create_address_node_CMockExpectAndReturn(__LINE__, string, cmock_retval)
void create_address_node_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* string, struct Person* cmock_to_return);
typedef struct Person* (* CMOCK_create_address_node_CALLBACK)(char* string, int cmock_num_calls);
void create_address_node_AddCallback(CMOCK_create_address_node_CALLBACK Callback);
void create_address_node_Stub(CMOCK_create_address_node_CALLBACK Callback);
#define create_address_node_StubWithCallback create_address_node_Stub
#define create_node_IgnoreAndReturn(cmock_retval) create_node_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void create_node_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct Person* cmock_to_return);
#define create_node_StopIgnore() create_node_CMockStopIgnore()
void create_node_CMockStopIgnore(void);
#define create_node_ExpectAndReturn(name, surname, email, phone, cmock_retval) create_node_CMockExpectAndReturn(__LINE__, name, surname, email, phone, cmock_retval)
void create_node_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* name, char* surname, char* email, char* phone, struct Person* cmock_to_return);
typedef struct Person* (* CMOCK_create_node_CALLBACK)(char* name, char* surname, char* email, char* phone, int cmock_num_calls);
void create_node_AddCallback(CMOCK_create_node_CALLBACK Callback);
void create_node_Stub(CMOCK_create_node_CALLBACK Callback);
#define create_node_StubWithCallback create_node_Stub
#define get_size_IgnoreAndReturn(cmock_retval) get_size_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void get_size_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define get_size_StopIgnore() get_size_CMockStopIgnore()
void get_size_CMockStopIgnore(void);
#define get_size_ExpectAndReturn(list, cmock_retval) get_size_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void get_size_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct Person** list, int cmock_to_return);
typedef int (* CMOCK_get_size_CALLBACK)(struct Person** list, int cmock_num_calls);
void get_size_AddCallback(CMOCK_get_size_CALLBACK Callback);
void get_size_Stub(CMOCK_get_size_CALLBACK Callback);
#define get_size_StubWithCallback get_size_Stub
#define person_print_Ignore() person_print_CMockIgnore()
void person_print_CMockIgnore(void);
#define person_print_StopIgnore() person_print_CMockStopIgnore()
void person_print_CMockStopIgnore(void);
#define person_print_Expect(p) person_print_CMockExpect(__LINE__, p)
void person_print_CMockExpect(UNITY_LINE_TYPE cmock_line, struct Person* p);
typedef void (* CMOCK_person_print_CALLBACK)(struct Person* p, int cmock_num_calls);
void person_print_AddCallback(CMOCK_person_print_CALLBACK Callback);
void person_print_Stub(CMOCK_person_print_CALLBACK Callback);
#define person_print_StubWithCallback person_print_Stub
#define llist_print_Ignore() llist_print_CMockIgnore()
void llist_print_CMockIgnore(void);
#define llist_print_StopIgnore() llist_print_CMockStopIgnore()
void llist_print_CMockStopIgnore(void);
#define llist_print_Expect(list) llist_print_CMockExpect(__LINE__, list)
void llist_print_CMockExpect(UNITY_LINE_TYPE cmock_line, struct Person* list);
typedef void (* CMOCK_llist_print_CALLBACK)(struct Person* list, int cmock_num_calls);
void llist_print_AddCallback(CMOCK_llist_print_CALLBACK Callback);
void llist_print_Stub(CMOCK_llist_print_CALLBACK Callback);
#define llist_print_StubWithCallback llist_print_Stub
#define llist_add_end_Ignore() llist_add_end_CMockIgnore()
void llist_add_end_CMockIgnore(void);
#define llist_add_end_StopIgnore() llist_add_end_CMockStopIgnore()
void llist_add_end_CMockStopIgnore(void);
#define llist_add_end_Expect(list, p) llist_add_end_CMockExpect(__LINE__, list, p)
void llist_add_end_CMockExpect(UNITY_LINE_TYPE cmock_line, struct Person** list, struct Person* p);
typedef void (* CMOCK_llist_add_end_CALLBACK)(struct Person** list, struct Person* p, int cmock_num_calls);
void llist_add_end_AddCallback(CMOCK_llist_add_end_CALLBACK Callback);
void llist_add_end_Stub(CMOCK_llist_add_end_CALLBACK Callback);
#define llist_add_end_StubWithCallback llist_add_end_Stub
#define llist_add_at_Ignore() llist_add_at_CMockIgnore()
void llist_add_at_CMockIgnore(void);
#define llist_add_at_StopIgnore() llist_add_at_CMockStopIgnore()
void llist_add_at_CMockStopIgnore(void);
#define llist_add_at_Expect(list, p, pos) llist_add_at_CMockExpect(__LINE__, list, p, pos)
void llist_add_at_CMockExpect(UNITY_LINE_TYPE cmock_line, struct Person** list, struct Person* p, int pos);
typedef void (* CMOCK_llist_add_at_CALLBACK)(struct Person** list, struct Person* p, int pos, int cmock_num_calls);
void llist_add_at_AddCallback(CMOCK_llist_add_at_CALLBACK Callback);
void llist_add_at_Stub(CMOCK_llist_add_at_CALLBACK Callback);
#define llist_add_at_StubWithCallback llist_add_at_Stub
#define llist_remove_at_Ignore() llist_remove_at_CMockIgnore()
void llist_remove_at_CMockIgnore(void);
#define llist_remove_at_StopIgnore() llist_remove_at_CMockStopIgnore()
void llist_remove_at_CMockStopIgnore(void);
#define llist_remove_at_Expect(list, pos) llist_remove_at_CMockExpect(__LINE__, list, pos)
void llist_remove_at_CMockExpect(UNITY_LINE_TYPE cmock_line, struct Person** list, int pos);
typedef void (* CMOCK_llist_remove_at_CALLBACK)(struct Person** list, int pos, int cmock_num_calls);
void llist_remove_at_AddCallback(CMOCK_llist_remove_at_CALLBACK Callback);
void llist_remove_at_Stub(CMOCK_llist_remove_at_CALLBACK Callback);
#define llist_remove_at_StubWithCallback llist_remove_at_Stub
#define llist_remove_all_Ignore() llist_remove_all_CMockIgnore()
void llist_remove_all_CMockIgnore(void);
#define llist_remove_all_StopIgnore() llist_remove_all_CMockStopIgnore()
void llist_remove_all_CMockStopIgnore(void);
#define llist_remove_all_Expect(list) llist_remove_all_CMockExpect(__LINE__, list)
void llist_remove_all_CMockExpect(UNITY_LINE_TYPE cmock_line, struct Person** list);
typedef void (* CMOCK_llist_remove_all_CALLBACK)(struct Person** list, int cmock_num_calls);
void llist_remove_all_AddCallback(CMOCK_llist_remove_all_CALLBACK Callback);
void llist_remove_all_Stub(CMOCK_llist_remove_all_CALLBACK Callback);
#define llist_remove_all_StubWithCallback llist_remove_all_Stub
#define llist_find_at_IgnoreAndReturn(cmock_retval) llist_find_at_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void llist_find_at_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct Person* cmock_to_return);
#define llist_find_at_StopIgnore() llist_find_at_CMockStopIgnore()
void llist_find_at_CMockStopIgnore(void);
#define llist_find_at_ExpectAndReturn(list, pos, cmock_retval) llist_find_at_CMockExpectAndReturn(__LINE__, list, pos, cmock_retval)
void llist_find_at_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct Person* list, int pos, struct Person* cmock_to_return);
typedef struct Person* (* CMOCK_llist_find_at_CALLBACK)(struct Person* list, int pos, int cmock_num_calls);
void llist_find_at_AddCallback(CMOCK_llist_find_at_CALLBACK Callback);
void llist_find_at_Stub(CMOCK_llist_find_at_CALLBACK Callback);
#define llist_find_at_StubWithCallback llist_find_at_Stub
#define llist_find_by_IgnoreAndReturn(cmock_retval) llist_find_by_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void llist_find_by_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct Person* cmock_to_return);
#define llist_find_by_StopIgnore() llist_find_by_CMockStopIgnore()
void llist_find_by_CMockStopIgnore(void);
#define llist_find_by_ExpectAndReturn(list, s, cmock_retval) llist_find_by_CMockExpectAndReturn(__LINE__, list, s, cmock_retval)
void llist_find_by_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct Person* list, char* s, struct Person* cmock_to_return);
typedef struct Person* (* CMOCK_llist_find_by_CALLBACK)(struct Person* list, char* s, int cmock_num_calls);
void llist_find_by_AddCallback(CMOCK_llist_find_by_CALLBACK Callback);
void llist_find_by_Stub(CMOCK_llist_find_by_CALLBACK Callback);
#define llist_find_by_StubWithCallback llist_find_by_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
